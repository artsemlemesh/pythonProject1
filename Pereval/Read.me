
##Pereaval API
    Mобильное приложение для Android и IOS, которое упростило бы туристам задачу по отправке данных о перевале и сократило время обработки запроса до трёх дней.

    Пользоваться мобильным приложением будут туристы. В горах они будут вносить данные о перевале в приложение и отправлять их в ФСТР, как только появится доступ в Интернет.

    Модератор из федерации будет верифицировать и вносить в базу данных информацию, полученную от пользователей, а те в свою очередь смогут увидеть в мобильном приложении статус модерации и просматривать базу с объектами, внесёнными другими.

    >для пользователя в мобильном приложении будут доступны следующие действия:

        Внесение информации о новом объекте (перевале) в карточку объекта.
        Редактирование в приложении неотправленных на сервер ФСТР данных об объектах. На перевале не всегда работает Интернет.
        Заполнение ФИО и контактных данных (телефон и электронная почта) с последующим их автозаполнением при внесении данных о новых объектах.
        Отправка данных на сервер ФСТР.
        Получение уведомления о статусе отправки (успешно/неуспешно).
        Согласие пользователя с политикой обработки персональных данных в случае нажатия на кнопку «Отправить» при отправке данных на сервер.

    >Пользователь с помощью мобильного приложения будет передавать в ФСТР следующие данные о перевале:
        координаты перевала и его высота;
        имя пользователя;
        почта и телефон пользователя;
        название перевала;
        несколько фотографий перевала.


    После этого турист нажмёт кнопку «Отправить» в мобильном приложении.
    Мобильное приложение вызовет метод **submitData** твоего REST API.

      ***
      GET /submitData/ - получает и выводит информацию о всех записях (перевалах).
      ***
      POST /submitData/ - заявка на внесение информации об одном горном перевале

      Пример JSON с информацией о перевале

        >{
                "id": 1,
                "user_id": {
                    "id": 1,
                    "email": "user1@gmail.com",
                    "full_name": "Joe Rogan",
                    "phone": 15711349804
                },
                "coords_id": {
                    "id": 1,
                    "latitude": "23.23423400",
                    "longitude": "34.23423400",
                    "height": 123
                },
                "level_diff": {
                    "id": 1,
                    "winter": "1B",
                    "summer": "2A",
                    "autumn": "2B",
                    "spring": "1B"
                },
                "beauty_title": "some words",
                "title": "sdfsd",
                "other_titles": "234",
                "connect": "asdfsd",
                "add_time": "2023-12-04T05:31:18.560720Z",
                "image": [],
                "status": "new"
                }

        > Результат метода: JSON
            *status — код HTTP, целое число:
                *500 — ошибка при выполнении операции;
                *400 — Bad Request (при нехватке полей);
                *200 — успех.
            *message — строка:
                *Причина ошибки (если она была);
                *Отправлено успешно;
                *Если отправка успешна, дополнительно возвращается id вставленной записи.
                *id — идентификатор, который был присвоен объекту при добавлении в базу данных.

                ***
                GET /submitData/{id} - получение данных о конкретном горном перевале с выводом всей информации
                ***
                PATCH /submitData/{id} - позволяет отредактировать существующую запись (замена), при условии, что она в статусе "new".
                Редактировать можно все поля, кроме тех, что содержат ФИО, адрес почты и номер телефона.
                ***
                GET /api/submitData/user_id__email=<str:email> - позволяет получить данные всех объектов, отправленных на сервер пользователем с почтой <***str:email***>.
                Фильтрация по адресу электронной почты реализуется с помощью пакета ***django-filter***.

https://artsemlemesh.pythonanywhere.com/submitData/

                Список внешних зависимостей приведен в файле ***requirements.txt***
                ***
                Проект размещен на хостинге ***pythonanywhere.com***:
                https://artsemlemesh.pythonanywhere.com/submitData/
                 (в проекте используется база данных db.sqlite3)
                 ***
                 Документация ***Swagger***:
                 https://haelgik.pythonanywhere.com/submitData/schema/
                ***
                Документация ***docs***
                https://haelgik.pythonanywhere.com/submitData/schema/docs/